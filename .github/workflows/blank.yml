# This is a basic workflow to help you get started with Actions

name: Very Basic

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    if: 1 == 2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.9.1

      - run: npm install @octokit/core @octokit/auth-app

      - name: GitHub Script
        uses: actions/github-script@v7.0.1
        with:
          # The script to run
          script: |
            const { Octokit } = require("@octokit/core")
            const { createAppAuth } = require("@octokit/auth-app")
            
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: 952584,
                privateKey: process.env.ABC,
                clientId: "Iv23li2EoWnaln85QxbX"
              },
            })

            // Send requests as GitHub App
            const info = await appOctokit.request("GET /app")
            const slug = info.data.slug
            console.log("authenticated as %s", slug)

            const additional = await appOctokit.request("GET /app/installations")
            console.log(additional)
            console.log(additional.data[0].permissions)

            // new auth
            const appiOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                installationId: additional.data[0].id,
                appId: additional.data[0].app_id,
                privateKey: process.env.ABC,
                clientId: "Iv23li2EoWnaln85QxbX"
              },
            })

            /*const issue = await appiOctokit.request("POST /repos/{owner}/{repo}/issues", {
              owner: "Domix24",
              repo: "ideal-fishstick",
              title: `hey ${new Date().toISOString()}`
            })*/
            const issue = await appiOctokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", {
              owner: "Domix24",
              repo: "ideal-fishstick",
              issue_number: 1
            })
            console.log(issue)

            /*const blob = await appiOctokit.request("POST /repos/{owner}/{repo}/git/blobs", {
              owner: "Domix24",
              repo: "ideal-fishstick",
              content: "hello",
              encoding: "utf-8"
            })
            console.log(blob)

            const blobi = await appiOctokit.request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {
              owner: "Domix24",
              repo: "ideal-fishstick",
              file_sha: blob.data.sha
            })
            console.log(blobi)*/
            /*const ref = await appiOctokit.request("GET /repos/{owner}/{repo}/git/ref/{ref}", {
              owner: "Domix24",
              repo: "ideal-fishstick",
              ref: "heads/main",
            })
            console.log(ref.data.object)
            const commitTree = await appiOctokit.request("POST /repos/{owner}/{repo}/git/trees", {
              owner: "Domix24",
              repo: "ideal-fishstick",
              tree: [
                {
                  path: "hello.txt",
                  mode: "100644",
                  type: "blob",
                  content: `${new Date().toISOString()}`,
                }
              ],
              base_tree: ref.data.object.sha,
            })

            console.log(commitTree)
            console.log(ref)*/
        env:
          ABC: ${{ secrets.privkey }}
  build-v2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.9.1

      - run: npm install @octokit/core @octokit/auth-app

      - name: GitHub Script
        uses: actions/github-script@v7.0.1
        id: github-script
        with:
          # The script to run
          script: |
            const { Octokit } = require("@octokit/core")
            const { createAppAuth } = require("@octokit/auth-app")
            
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: 952584,
                privateKey: process.env.ABC,
                clientId: "Iv23li2EoWnaln85QxbX"
              },
            })

            const additional = await appOctokit.request("GET /app/installations")
            console.log(additional)
            console.log(additional.data[0].permissions)

            // new auth
            const appiOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                installationId: additional.data[0].id,
                appId: additional.data[0].app_id,
                privateKey: process.env.ABC,
                clientId: "Iv23li2EoWnaln85QxbX"
              },
            })

            const tooken = await appiOctokit.request("POST /app/installations/{installation_id}/access_tokens", {
              installation_id: additional.data[0].id
            })

            return tooken.data.token
        env:
          ABC: ${{ secrets.privkey }}
          
      - name: Test
        id: testo
        run: echo VALUX=${{ steps.github-script.outputs.result }} >> $GITHUB_OUTPUT

      - name: GitHub CLI
        run: |
          gh api graphql -H X-Github-Next-Global-ID:1 -f query='
            query myquery($repo: String!, $owner: String!) {
              repository(name: $repo, owner: $owner) {
                defaultBranchRef {
                  target {
                    ... on Commit {
                      history(first: 2) {
                        nodes {
                          oid
                        }
                      }
                    }
                  }
                }
              }
            }
          ' -F repo="ideal-fishstick" -F owner="Domix24" > query_data.json
          OID=$(jq '.data.repository.defaultBranchRef.target.history.nodes[0].oid' query_data.json)
          OID=${OID#"\""}
          OID=${OID%"\""}
          FILECO=$(date | base64)
          gh api graphql -H X-Github-Next-Global-ID:1 -f query='
            mutation ($input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: $input) {
                commit {
                  url
                }
              }
            }
          ' -F input[branch][repositoryNameWithOwner]="Domix24/ideal-fishstick" \
            -F input[branch][branchName]="main" \
            -F input[message][headline]=":)" \
            -F input[expectedHeadOid]="$OID" \
            -F input[fileChanges][additions][][path]="when" \
#            -F input[fileChanges][additions][0][contents]="$FILECO"
        env:
          GH_TOKEN: ${{ github.token }}
#          GH_TOKEN: ${{ steps.testo.outputs.VALUX }}
